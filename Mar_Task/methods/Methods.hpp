/*!
	\file Methods.hpp
	\brief Обработка геометрических данных (прямоугольники и контуры)
 	\author Sadrud
	\date 2025
 */  

#ifndef NETHODS_HPP
#define METHODS_HPP

#include "../include/Data_Structures/Node.hpp"
#include "../include/Geometry/Axis_Parallel_Edge.hpp"
#include "../include/Geometry/Edge.hpp"

/*!
	\brief Компаратор - функция для сравнения 2 ребер
	\param a, b Указатели на ребра прямоугольника (ребра одного типа: либо вертикальные, либо гоизонтальные)
	Данный компаратор сравнивание два вертикальных (горизонтальных) ребра по их расположению на оси, которой они перпендикулярны.
	Если ребра одинаково расположены, то сравнение происходит по второстепенным признакам (левое или правое ребро, индекс прямоугольника, чье это ребро)
	\return Возвращает 1, если первый аргумент больше второго, -1 - иначе и 0, если они абсолютно идентичны
*/
int axisParallelEdgeCmp (AxisParallelEdge *a, AxisParallelEdge *b);

/*!
	\brief Сортировка вставками
	\param[in] a, n, cmp Массив, который хотим отсортировать, количесвто в нем элементов и компаратор
	Шаблонная функция для сортировки вставками
*/ 
template <class T>
void insertionSort (T a[], int n, int (*cmp) (T, T));

/*!
	\brief Построение массива из ребер
	Построение из множества прямоугольников массива, состоящего из вертикальных ребер прямоугольников
	\param r, n Массив прямоугольников и их количество
	\return Указатель на массив вертикальных ребер прямоугольников
 */
AxisParallelEdge **buildSchedule (Rectangle r[], int n);

/*!
	\brief Основной алгоритм
	Именно он вычисляет контур объединения прямоугольников.
	Вначале создается массив из вертикальных ребер прямоугольников. Далее создается список ребер (пустой) и словарь (рандомизированное дерево поиска).
	Далее сканируюущая линия проходит по всем ребрам из изначального массива прямоугольников. Эффект сканирующей линии создается с помощью цикла и двух специальных методов класса AxisParallelEdge
	\param r, n Массив прямоугольников и их количество
	\return Возвращает указатель на список из ребер (уже обычных ребер, которые представляются 2 парами точек на плоскости и параллельны осям координат)
 */
List<Edge*>* findContour (Rectangle r[], int n);


#endif
